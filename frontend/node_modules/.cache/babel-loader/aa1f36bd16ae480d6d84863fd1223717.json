{"ast":null,"code":"var _jsxFileName = \"/Users/davegb313/code/new-parties-project/frontend/src/parties/pages/Parties.js\",\n    _s = $RefreshSig$();\n\nimport React, { useContext, useEffect, useState } from \"react\";\nimport PartyList from \"../components/PartyList\";\nimport { AuthContext } from \"../../shared/context/auth-context\";\nimport { useHttpClient } from \"../../shared/hooks/http-hook\";\nimport ErrorModal from \"../../shared/UIElemnets/ErrorModal\";\nimport LoadingSpinner from \"../../shared/UIElemnets/LoadingSpinner\";\nimport \"./Parties.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Parties = () => {\n  _s();\n\n  const auth = useContext(AuthContext);\n  const {\n    isLoading,\n    error,\n    sendRequest,\n    clearError\n  } = useHttpClient();\n  const [loadedParties, setLoadedParties] = useState();\n  useEffect(() => {\n    // const sendRequest = async () => {\n    //     setIsLoading(true);\n    //     try {\n    //         const response = await fetch('http://localhost:4000/parties');\n    //         if (!response.ok) {\n    //             throw new Error(resData.message);\n    //         }\n    //         setLoadedParties(resData.allParties);\n    //         const resData = await response.json();\n    //     } catch (err) {\n    //         setError(err);\n    //     }\n    //     setIsLoading(false);\n    // };\n    let fetchParties = () => {\n      sendRequest('http://localhost:4000/parties/all').then(par => setLoadedParties(par.allParties));\n    };\n\n    fetchParties();\n  }, [sendRequest]);\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"parties\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"parties-header\",\n        children: /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Parties\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(ErrorModal, {\n        error: error,\n        onClick: clearError\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 13\n      }, this), isLoading && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"center\",\n        children: /*#__PURE__*/_jsxDEV(LoadingSpinner, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 17\n      }, this), !isLoading && loadedParties && /*#__PURE__*/_jsxDEV(PartyList, {\n        items: loadedParties,\n        userId: auth.userId,\n        isLoggedIn: false\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 45\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Parties, \"gjPJk7tXD/n8xTjnhZb2tlZcCI8=\", false, function () {\n  return [useHttpClient];\n});\n\n_c = Parties;\nexport default Parties;\n\nvar _c;\n\n$RefreshReg$(_c, \"Parties\");","map":{"version":3,"sources":["/Users/davegb313/code/new-parties-project/frontend/src/parties/pages/Parties.js"],"names":["React","useContext","useEffect","useState","PartyList","AuthContext","useHttpClient","ErrorModal","LoadingSpinner","Parties","auth","isLoading","error","sendRequest","clearError","loadedParties","setLoadedParties","fetchParties","then","par","allParties","userId"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,SAA5B,EAAuCC,QAAvC,QAAuD,OAAvD;AAEA,OAAOC,SAAP,MAAsB,yBAAtB;AACA,SAASC,WAAT,QAA4B,mCAA5B;AACA,SAASC,aAAT,QAA8B,8BAA9B;AACA,OAAOC,UAAP,MAAuB,oCAAvB;AACA,OAAOC,cAAP,MAA2B,wCAA3B;AACA,OAAO,eAAP;;;AAEA,MAAMC,OAAO,GAAG,MAAM;AAAA;;AAClB,QAAMC,IAAI,GAAGT,UAAU,CAACI,WAAD,CAAvB;AACA,QAAM;AAAEM,IAAAA,SAAF;AAAaC,IAAAA,KAAb;AAAoBC,IAAAA,WAApB;AAAiCC,IAAAA;AAAjC,MAAgDR,aAAa,EAAnE;AACA,QAAM,CAACS,aAAD,EAAgBC,gBAAhB,IAAoCb,QAAQ,EAAlD;AAEAD,EAAAA,SAAS,CAAC,MAAK;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAIe,YAAY,GAAG,MAAK;AACpBJ,MAAAA,WAAW,CAAC,mCAAD,CAAX,CACCK,IADD,CACMC,GAAG,IAAGH,gBAAgB,CAACG,GAAG,CAACC,UAAL,CAD5B;AAEH,KAHD;;AAIAH,IAAAA,YAAY;AACf,GApBQ,EAoBN,CAACJ,WAAD,CApBM,CAAT;AAsBA,sBACA,QAAC,KAAD,CAAO,QAAP;AAAA,2BACI;AAAK,MAAA,SAAS,EAAC,SAAf;AAAA,8BACI;AAAK,QAAA,SAAS,EAAC,gBAAf;AAAA,+BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,cADJ,eAII,QAAC,UAAD;AAAY,QAAA,KAAK,EAAED,KAAnB;AAA0B,QAAA,OAAO,EAAEE;AAAnC;AAAA;AAAA;AAAA;AAAA,cAJJ,EAKKH,SAAS,iBACN;AAAK,QAAA,SAAS,EAAC,QAAf;AAAA,+BACI,QAAC,cAAD;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,cANR,EAUK,CAACA,SAAD,IAAcI,aAAd,iBAA+B,QAAC,SAAD;AAAW,QAAA,KAAK,EAAEA,aAAlB;AAAiC,QAAA,MAAM,EAAEL,IAAI,CAACW,MAA9C;AAAsD,QAAA,UAAU,EAAE;AAAlE;AAAA;AAAA;AAAA;AAAA,cAVpC;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADA;AAeH,CA1CD;;GAAMZ,O;UAEoDH,a;;;KAFpDG,O;AA4CN,eAAeA,OAAf","sourcesContent":["import React, { useContext, useEffect, useState } from \"react\";\n\nimport PartyList from \"../components/PartyList\";\nimport { AuthContext } from \"../../shared/context/auth-context\";\nimport { useHttpClient } from \"../../shared/hooks/http-hook\";\nimport ErrorModal from \"../../shared/UIElemnets/ErrorModal\";\nimport LoadingSpinner from \"../../shared/UIElemnets/LoadingSpinner\";\nimport \"./Parties.css\";\n\nconst Parties = () => {\n    const auth = useContext(AuthContext);\n    const { isLoading, error, sendRequest, clearError } = useHttpClient();\n    const [loadedParties, setLoadedParties] = useState();\n\n    useEffect(()=> {\n        // const sendRequest = async () => {\n        //     setIsLoading(true);\n        //     try {\n        //         const response = await fetch('http://localhost:4000/parties');\n        //         if (!response.ok) {\n        //             throw new Error(resData.message);\n        //         }\n        //         setLoadedParties(resData.allParties);\n        //         const resData = await response.json();\n        //     } catch (err) {\n        //         setError(err);\n        //     }\n        //     setIsLoading(false);\n        // };\n        let fetchParties = ()=> {\n            sendRequest('http://localhost:4000/parties/all')\n            .then(par=> setLoadedParties(par.allParties));\n        };\n        fetchParties();\n    }, [sendRequest]);\n\n    return (\n    <React.Fragment> \n        <div className=\"parties\">\n            <div className=\"parties-header\">\n                <h1>Parties</h1>\n            </div>\n            <ErrorModal error={error} onClick={clearError} />\n            {isLoading && (\n                <div className=\"center\">\n                    <LoadingSpinner />\n                </div>\n            )}\n            {!isLoading && loadedParties && <PartyList items={loadedParties} userId={auth.userId} isLoggedIn={false}/>}\n        </div>\n    </React.Fragment>);\n}\n\nexport default Parties;"]},"metadata":{},"sourceType":"module"}