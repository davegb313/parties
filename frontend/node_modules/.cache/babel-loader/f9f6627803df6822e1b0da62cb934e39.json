{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useCallback, useRef, useEffect } from \"react\";\nexport const useHttpClient = () => {\n  _s();\n\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(false);\n  const activeHttpRequests = useRef([]);\n  const sendRequest = useCallback(async function (url) {\n    let method = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'GET';\n    let body = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n    let headers = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    setIsLoading(true);\n    const httpAbortController = new AbortController();\n    activeHttpRequests.current.push(httpAbortController);\n\n    try {\n      const response = await fetch(url, {\n        method,\n        body,\n        headers,\n        signal: httpAbortController.signal\n      });\n      const resData = await response.json();\n      activeHttpRequests.current = activeHttpRequests.current.filter(reqCtrl => reqCtrl !== httpAbortController);\n\n      if (!response.ok) {\n        throw new Error(resData.message);\n      }\n\n      setIsLoading(false);\n      return resData;\n    } catch (err) {\n      setError(err.message || 'Something went wrong, please try again');\n      setIsLoading(false);\n      throw err;\n    }\n  }, []);\n\n  const clearError = () => setError(null);\n\n  useEffect(() => {\n    return () => {\n      activeHttpRequests.current.forEach(abortCtrl => abortCtrl.abort());\n    };\n  }, []);\n  return {\n    isLoading,\n    error,\n    sendRequest,\n    clearError\n  };\n};\n\n_s(useHttpClient, \"7AFigJsof1skgOXK4v9hG2s+o2w=\");","map":{"version":3,"sources":["/Users/davegb313/code/new-parties-project/frontend/src/shared/hooks/http-hook.js"],"names":["useState","useCallback","useRef","useEffect","useHttpClient","isLoading","setIsLoading","error","setError","activeHttpRequests","sendRequest","url","method","body","headers","httpAbortController","AbortController","current","push","response","fetch","signal","resData","json","filter","reqCtrl","ok","Error","message","err","clearError","forEach","abortCtrl","abort"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,WAAnB,EAAgCC,MAAhC,EAAwCC,SAAxC,QAAyD,OAAzD;AAEA,OAAO,MAAMC,aAAa,GAAG,MAAM;AAAA;;AAC/B,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BN,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM,CAACO,KAAD,EAAQC,QAAR,IAAoBR,QAAQ,CAAC,KAAD,CAAlC;AAEA,QAAMS,kBAAkB,GAAGP,MAAM,CAAC,EAAD,CAAjC;AAEA,QAAMQ,WAAW,GAAGT,WAAW,CAAC,gBAAOU,GAAP,EAAsD;AAAA,QAA1CC,MAA0C,uEAAnC,KAAmC;AAAA,QAA5BC,IAA4B,uEAAvB,IAAuB;AAAA,QAAjBC,OAAiB,uEAAP,EAAO;AAClFR,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACA,UAAMS,mBAAmB,GAAG,IAAIC,eAAJ,EAA5B;AACAP,IAAAA,kBAAkB,CAACQ,OAAnB,CAA2BC,IAA3B,CAAgCH,mBAAhC;;AACA,QAAI;AACA,YAAMI,QAAQ,GAAG,MAAMC,KAAK,CAACT,GAAD,EAAM;AAC9BC,QAAAA,MAD8B;AAE9BC,QAAAA,IAF8B;AAG9BC,QAAAA,OAH8B;AAI9BO,QAAAA,MAAM,EAAEN,mBAAmB,CAACM;AAJE,OAAN,CAA5B;AAOA,YAAMC,OAAO,GAAG,MAAMH,QAAQ,CAACI,IAAT,EAAtB;AACAd,MAAAA,kBAAkB,CAACQ,OAAnB,GAA6BR,kBAAkB,CAACQ,OAAnB,CAA2BO,MAA3B,CAAkCC,OAAO,IAAIA,OAAO,KAAKV,mBAAzD,CAA7B;;AACA,UAAI,CAACI,QAAQ,CAACO,EAAd,EAAkB;AACd,cAAM,IAAIC,KAAJ,CAAUL,OAAO,CAACM,OAAlB,CAAN;AACH;;AACDtB,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACA,aAAOgB,OAAP;AACH,KAfD,CAeE,OAAMO,GAAN,EAAW;AACTrB,MAAAA,QAAQ,CAACqB,GAAG,CAACD,OAAJ,IAAe,wCAAhB,CAAR;AACAtB,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACA,YAAMuB,GAAN;AACH;AACJ,GAxB8B,EAwB5B,EAxB4B,CAA/B;;AAyBA,QAAMC,UAAU,GAAG,MAAMtB,QAAQ,CAAC,IAAD,CAAjC;;AAEAL,EAAAA,SAAS,CAAC,MAAM;AACZ,WAAO,MAAM;AACTM,MAAAA,kBAAkB,CAACQ,OAAnB,CAA2Bc,OAA3B,CAAmCC,SAAS,IAAIA,SAAS,CAACC,KAAV,EAAhD;AACH,KAFD;AAGH,GAJQ,EAIN,EAJM,CAAT;AAMA,SAAO;AAAE5B,IAAAA,SAAF;AAAaE,IAAAA,KAAb;AAAoBG,IAAAA,WAApB;AAAiCoB,IAAAA;AAAjC,GAAP;AACH,CAxCM;;GAAM1B,a","sourcesContent":["import { useState, useCallback, useRef, useEffect } from \"react\";\n\nexport const useHttpClient = () => {\n    const [isLoading, setIsLoading] = useState(false);\n    const [error, setError] = useState(false);\n\n    const activeHttpRequests = useRef([]);\n\n    const sendRequest = useCallback(async (url, method='GET', body=null, headers = {}) => {\n        setIsLoading(true);\n        const httpAbortController = new AbortController();\n        activeHttpRequests.current.push(httpAbortController);\n        try {\n            const response = await fetch(url, {\n                method,\n                body,\n                headers,\n                signal: httpAbortController.signal\n            });\n    \n            const resData = await response.json();\n            activeHttpRequests.current = activeHttpRequests.current.filter(reqCtrl => reqCtrl !== httpAbortController);\n            if (!response.ok) {\n                throw new Error(resData.message)\n            }\n            setIsLoading(false);\n            return resData;\n        } catch(err) {\n            setError(err.message || 'Something went wrong, please try again');\n            setIsLoading(false);\n            throw err;\n        }\n    }, []);\n    const clearError = () => setError(null);\n\n    useEffect(() => {\n        return () => {\n            activeHttpRequests.current.forEach(abortCtrl => abortCtrl.abort());\n        };\n    }, []);\n\n    return { isLoading, error, sendRequest, clearError }\n};"]},"metadata":{},"sourceType":"module"}