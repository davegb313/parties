{"ast":null,"code":"var _jsxFileName = \"/Users/davegb313/code/new-parties-project/frontend/src/parties/pages/UpdateParty.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport Button from \"../../shared/UIElemnets/Button\";\nimport Card from \"../../shared/UIElemnets/Card\";\nimport ErrorModal from \"../../shared/UIElemnets/ErrorModal\";\nimport LoadingSpinner from \"../../shared/UIElemnets/LoadingSpinner\";\nimport Input from \"../../shared/UIElemnets/Input\";\nimport { VALIDATOR_REQUIRE, VALIDATOR_MINLENGTH } from \"../../shared/util/validators\";\nimport { useForm } from \"../../shared/hooks/form-hook\";\nimport { useHttpClient } from \"../../shared/hooks/http-hook\";\nimport './UpdateParty.css';\nimport { useParams } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst UpdateParty = () => {\n  _s();\n\n  const partyId = useParams().partyId;\n  const {\n    loadedParty,\n    setLoadedParty\n  } = useState(null);\n  const {\n    isLoading,\n    error,\n    sendRequest,\n    clearError\n  } = useHttpClient();\n  const [formState, inputHandler, setFormData] = useForm({\n    title: {\n      value: '',\n      isValid: false\n    },\n    description: {\n      value: '',\n      isValid: false\n    }\n  }, false);\n  useEffect(() => {\n    let fetchParty = () => sendRequest(`http://localhost:4000/parties/party/${partyId}`).then(par => setLoadedParty(par.party));\n\n    fetchParty();\n    console.log(loadedParty);\n  }, [sendRequest]);\n\n  const submitHandler = event => {\n    event.preventDefault();\n  };\n\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(ErrorModal, {\n      error: error,\n      onClear: clearError\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Card, {\n      className: \"new-party\",\n      children: /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: submitHandler,\n        children: [isLoading && /*#__PURE__*/_jsxDEV(LoadingSpinner, {\n          asOverlay: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 35\n        }, this), /*#__PURE__*/_jsxDEV(Input, {\n          id: \"title\",\n          label: \"Name your party:\",\n          element: \"input\",\n          validators: [VALIDATOR_REQUIRE()],\n          errorText: \"Plaese enter a valid party-title\",\n          onInput: inputHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Input, {\n          id: \"description\",\n          label: \"What's goin on there(description):\",\n          element: \"input\",\n          validators: [VALIDATOR_MINLENGTH(5)],\n          errorText: \"Plaese enter a valid party-description(min. 5 symbols)\",\n          onInput: inputHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          type: \"submit\",\n          disabled: !formState.isValid,\n          children: \"UPDATE PARTY\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 9\n  }, this);\n};\n\n_s(UpdateParty, \"Mcw3I1qY0UaO/CY5e2JXOuXrJQQ=\", false, function () {\n  return [useParams, useHttpClient, useForm];\n});\n\n_c = UpdateParty;\nexport default UpdateParty;\n\nvar _c;\n\n$RefreshReg$(_c, \"UpdateParty\");","map":{"version":3,"sources":["/Users/davegb313/code/new-parties-project/frontend/src/parties/pages/UpdateParty.js"],"names":["React","useEffect","useState","Button","Card","ErrorModal","LoadingSpinner","Input","VALIDATOR_REQUIRE","VALIDATOR_MINLENGTH","useForm","useHttpClient","useParams","UpdateParty","partyId","loadedParty","setLoadedParty","isLoading","error","sendRequest","clearError","formState","inputHandler","setFormData","title","value","isValid","description","fetchParty","then","par","party","console","log","submitHandler","event","preventDefault"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AAEA,OAAOC,MAAP,MAAmB,gCAAnB;AACA,OAAOC,IAAP,MAAiB,8BAAjB;AACA,OAAOC,UAAP,MAAuB,oCAAvB;AACA,OAAOC,cAAP,MAA2B,wCAA3B;AACA,OAAOC,KAAP,MAAkB,+BAAlB;AACA,SAASC,iBAAT,EAA4BC,mBAA5B,QAAuD,8BAAvD;AACA,SAASC,OAAT,QAAwB,8BAAxB;AACA,SAASC,aAAT,QAA8B,8BAA9B;AACA,OAAO,mBAAP;AACA,SAASC,SAAT,QAA0B,kBAA1B;;;AAEA,MAAMC,WAAW,GAAG,MAAM;AAAA;;AACtB,QAAMC,OAAO,GAAGF,SAAS,GAAGE,OAA5B;AACA,QAAM;AAAEC,IAAAA,WAAF;AAAeC,IAAAA;AAAf,MAAkCd,QAAQ,CAAC,IAAD,CAAhD;AACA,QAAM;AAAEe,IAAAA,SAAF;AAAaC,IAAAA,KAAb;AAAoBC,IAAAA,WAApB;AAAiCC,IAAAA;AAAjC,MAAgDT,aAAa,EAAnE;AACA,QAAM,CAACU,SAAD,EAAYC,YAAZ,EAA0BC,WAA1B,IAAyCb,OAAO,CAClD;AACIc,IAAAA,KAAK,EAAE;AACHC,MAAAA,KAAK,EAAE,EADJ;AAEHC,MAAAA,OAAO,EAAE;AAFN,KADX;AAKIC,IAAAA,WAAW,EAAE;AACTF,MAAAA,KAAK,EAAE,EADE;AAETC,MAAAA,OAAO,EAAE;AAFA;AALjB,GADkD,EAWlD,KAXkD,CAAtD;AAcAzB,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAI2B,UAAU,GAAG,MAAMT,WAAW,CAAE,uCAAsCL,OAAQ,EAAhD,CAAX,CACEe,IADF,CACOC,GAAG,IAAId,cAAc,CAACc,GAAG,CAACC,KAAL,CAD5B,CAAvB;;AAEAH,IAAAA,UAAU;AACVI,IAAAA,OAAO,CAACC,GAAR,CAAYlB,WAAZ;AACH,GALQ,EAKN,CAACI,WAAD,CALM,CAAT;;AAOA,QAAMe,aAAa,GAAGC,KAAK,IAAI;AAC3BA,IAAAA,KAAK,CAACC,cAAN;AACH,GAFD;;AAIA,sBACI,QAAC,KAAD,CAAO,QAAP;AAAA,4BACI,QAAC,UAAD;AAAY,MAAA,KAAK,EAAElB,KAAnB;AAA0B,MAAA,OAAO,EAAEE;AAAnC;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI,QAAC,IAAD;AAAM,MAAA,SAAS,EAAC,WAAhB;AAAA,6BACI;AAAM,QAAA,QAAQ,EAAEc,aAAhB;AAAA,mBACKjB,SAAS,iBAAI,QAAC,cAAD;AAAgB,UAAA,SAAS;AAAzB;AAAA;AAAA;AAAA;AAAA,gBADlB,eAEI,QAAC,KAAD;AACI,UAAA,EAAE,EAAC,OADP;AAEI,UAAA,KAAK,EAAC,kBAFV;AAGI,UAAA,OAAO,EAAC,OAHZ;AAII,UAAA,UAAU,EAAE,CAACT,iBAAiB,EAAlB,CAJhB;AAKI,UAAA,SAAS,EAAC,kCALd;AAMI,UAAA,OAAO,EAAEc;AANb;AAAA;AAAA;AAAA;AAAA,gBAFJ,eAUI,QAAC,KAAD;AACI,UAAA,EAAE,EAAC,aADP;AAEI,UAAA,KAAK,EAAC,oCAFV;AAGI,UAAA,OAAO,EAAC,OAHZ;AAII,UAAA,UAAU,EAAE,CAACb,mBAAmB,CAAC,CAAD,CAApB,CAJhB;AAKI,UAAA,SAAS,EAAC,wDALd;AAMI,UAAA,OAAO,EAAEa;AANb;AAAA;AAAA;AAAA;AAAA,gBAVJ,eAkBI,QAAC,MAAD;AAAQ,UAAA,IAAI,EAAC,QAAb;AAAsB,UAAA,QAAQ,EAAE,CAACD,SAAS,CAACK,OAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAlBJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AA2BH,CAxDD;;GAAMb,W;UACcD,S,EAEsCD,a,EACPD,O;;;KAJ7CG,W;AA0DN,eAAeA,WAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\n\nimport Button from \"../../shared/UIElemnets/Button\";\nimport Card from \"../../shared/UIElemnets/Card\";\nimport ErrorModal from \"../../shared/UIElemnets/ErrorModal\";\nimport LoadingSpinner from \"../../shared/UIElemnets/LoadingSpinner\";\nimport Input from \"../../shared/UIElemnets/Input\";\nimport { VALIDATOR_REQUIRE, VALIDATOR_MINLENGTH } from \"../../shared/util/validators\";\nimport { useForm } from \"../../shared/hooks/form-hook\";\nimport { useHttpClient } from \"../../shared/hooks/http-hook\";\nimport './UpdateParty.css';\nimport { useParams } from \"react-router-dom\";\n\nconst UpdateParty = () => {\n    const partyId = useParams().partyId;\n    const { loadedParty, setLoadedParty } = useState(null);\n    const { isLoading, error, sendRequest, clearError } = useHttpClient();\n    const [formState, inputHandler, setFormData] = useForm(\n        {\n            title: {\n                value: '',\n                isValid: false\n            },\n            description: {\n                value: '',\n                isValid: false\n            }\n        },\n        false\n    );\n\n    useEffect(() => {\n        let fetchParty = () => sendRequest(`http://localhost:4000/parties/party/${partyId}`)\n                                .then(par => setLoadedParty(par.party));\n        fetchParty();\n        console.log(loadedParty);\n    }, [sendRequest]);\n\n    const submitHandler = event => {\n        event.preventDefault();\n    }\n\n    return (\n        <React.Fragment>\n            <ErrorModal error={error} onClear={clearError} />\n            <Card className=\"new-party\">\n                <form onSubmit={submitHandler}>\n                    {isLoading && <LoadingSpinner asOverlay />}\n                    <Input\n                        id=\"title\"\n                        label=\"Name your party:\"\n                        element=\"input\"\n                        validators={[VALIDATOR_REQUIRE()]}\n                        errorText=\"Plaese enter a valid party-title\"\n                        onInput={inputHandler}\n                    />\n                    <Input\n                        id=\"description\"\n                        label=\"What's goin on there(description):\"\n                        element=\"input\"\n                        validators={[VALIDATOR_MINLENGTH(5)]}\n                        errorText=\"Plaese enter a valid party-description(min. 5 symbols)\"\n                        onInput={inputHandler}\n                    />\n                    <Button type=\"submit\" disabled={!formState.isValid}>UPDATE PARTY</Button>\n                </form>\n            </Card>\n        </React.Fragment>\n    )\n}\n\nexport default UpdateParty;"]},"metadata":{},"sourceType":"module"}