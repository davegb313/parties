{"ast":null,"code":"var _jsxFileName = \"/Users/davegb313/code/new-parties-project/frontend/src/user/Auth.js\",\n    _s = $RefreshSig$();\n\nimport React, { useContext, useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport Button from \"../shared/UIElemnets/Button\";\nimport { VALIDATOR_REQUIRE, VALIDATOR_MINLENGTH, VALIDATOR_EMAIL } from \"../shared/util/validators\";\nimport ErrorModal from \"../shared/UIElemnets/ErrorModal\";\nimport LoadingSpinner from \"../shared/UIElemnets/LoadingSpinner\";\nimport { useForm } from \"../shared/hooks/form-hook\";\nimport { useHttpClient } from \"../shared/hooks/http-hook\";\nimport { AuthContext } from \"../shared/context/auth-context\";\nimport Card from \"../shared/UIElemnets/Card\";\nimport Input from \"../shared/UIElemnets/Input\";\nimport \"./Auth.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Auth = () => {\n  _s();\n\n  const navigate = useNavigate();\n  const auth = useContext(AuthContext);\n  const [isLoginMode, setIsLoginMode] = useState(true);\n  const {\n    isLoading,\n    error,\n    sendRequest,\n    clearError\n  } = useHttpClient();\n  const [formState, inputHandler, setFromData] = useForm({\n    email: {\n      value: '',\n      isValid: false\n    },\n    password: {\n      value: '',\n      isValid: false\n    }\n  }, false);\n\n  const switchModeHandler = () => {\n    if (!isLoginMode) {\n      setFromData({ ...formState.inputs,\n        username: undefined\n      }, formState.inputs.email.isValid && formState.inputs.password.isValid);\n    } else {\n      setFromData({ ...formState.inputs,\n        username: {\n          value: '',\n          isValid: false\n        }\n      }, false);\n    }\n\n    setIsLoginMode(prevMode => !prevMode);\n  };\n\n  const authSubmithandler = async event => {\n    event.preventDefault();\n\n    if (isLoginMode) {\n      try {\n        let response = await sendRequest('http://localhost:4000/login', 'POST', JSON.stringify({\n          email: formState.inputs.email.value,\n          password: formState.inputs.password.value\n        }), {\n          'Content-Type': 'application/json'\n        });\n        auth.login(response.user._id);\n        navigate('/parties');\n      } catch (err) {}\n\n      ;\n    } else {\n      try {\n        let response = await sendRequest('http://localhost:4000/signup', 'POST', JSON.stringify({\n          username: formState.inputs.username.value,\n          email: formState.inputs.email.value,\n          password: formState.inputs.password.value\n        }), {\n          'Content-Type': 'application/json'\n        });\n        auth.login(response.user._id);\n        navigate('/parties');\n      } catch (err) {}\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(ErrorModal, {\n      error: error,\n      onClear: errorHandler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Card, {\n      className: \"auth\",\n      children: [isLoading && /*#__PURE__*/_jsxDEV(LoadingSpinner, {\n        asOverlay: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 31\n      }, this), isLoginMode ? /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"LOGIN\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 32\n      }, this) : /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"SIGNUP\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 49\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        children: [!isLoginMode && /*#__PURE__*/_jsxDEV(Input, {\n          id: \"username\",\n          label: \"username\",\n          element: \"input\",\n          validators: [VALIDATOR_REQUIRE()],\n          errorText: \"Plaese enter a valid username\",\n          onInput: inputHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(Input, {\n          id: \"email\",\n          label: \"email\",\n          element: \"input\",\n          validators: [VALIDATOR_EMAIL()],\n          errorText: \"Plaese enter a valid email\",\n          onInput: inputHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 21\n        }, this), !isLoginMode && /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"IMAGE UPLOAD\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(Input, {\n          id: \"password\",\n          label: \"password\",\n          element: \"input\",\n          type: \"password\",\n          validators: [VALIDATOR_MINLENGTH(6)],\n          errorText: \"Plaese enter a valid password\",\n          onInput: inputHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"auth-footer\",\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            type: \"button\",\n            onClick: authSubmithandler,\n            disabled: !formState.isValid,\n            children: isLoginMode ? 'LOGIN' : 'SIGNUP'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 133,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        inverse: true,\n        onClick: switchModeHandler,\n        children: [\"SWITCH TO \", isLoginMode ? 'SIGNUP' : 'LOGIN']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 96,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Auth, \"NyrZx3NL8C2C6QURVazdXH/wmqI=\", false, function () {\n  return [useNavigate, useHttpClient, useForm];\n});\n\n_c = Auth;\nexport default Auth;\n\nvar _c;\n\n$RefreshReg$(_c, \"Auth\");","map":{"version":3,"sources":["/Users/davegb313/code/new-parties-project/frontend/src/user/Auth.js"],"names":["React","useContext","useState","useNavigate","Button","VALIDATOR_REQUIRE","VALIDATOR_MINLENGTH","VALIDATOR_EMAIL","ErrorModal","LoadingSpinner","useForm","useHttpClient","AuthContext","Card","Input","Auth","navigate","auth","isLoginMode","setIsLoginMode","isLoading","error","sendRequest","clearError","formState","inputHandler","setFromData","email","value","isValid","password","switchModeHandler","inputs","username","undefined","prevMode","authSubmithandler","event","preventDefault","response","JSON","stringify","login","user","_id","err","errorHandler"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,QAA5B,QAA4C,OAA5C;AACA,SAASC,WAAT,QAA4B,kBAA5B;AAEA,OAAOC,MAAP,MAAmB,6BAAnB;AACA,SAASC,iBAAT,EAA4BC,mBAA5B,EAAiDC,eAAjD,QAAwE,2BAAxE;AACA,OAAOC,UAAP,MAAuB,iCAAvB;AACA,OAAOC,cAAP,MAA2B,qCAA3B;AACA,SAASC,OAAT,QAAwB,2BAAxB;AACA,SAASC,aAAT,QAA8B,2BAA9B;AACA,SAASC,WAAT,QAA4B,gCAA5B;AACA,OAAOC,IAAP,MAAiB,2BAAjB;AACA,OAAOC,KAAP,MAAkB,4BAAlB;AACA,OAAO,YAAP;;;AAEA,MAAMC,IAAI,GAAG,MAAK;AAAA;;AACd,QAAMC,QAAQ,GAAGb,WAAW,EAA5B;AACA,QAAMc,IAAI,GAAGhB,UAAU,CAACW,WAAD,CAAvB;AACA,QAAM,CAACM,WAAD,EAAcC,cAAd,IAAgCjB,QAAQ,CAAC,IAAD,CAA9C;AACA,QAAM;AAAEkB,IAAAA,SAAF;AAAaC,IAAAA,KAAb;AAAoBC,IAAAA,WAApB;AAAiCC,IAAAA;AAAjC,MAAgDZ,aAAa,EAAnE;AAEA,QAAM,CAACa,SAAD,EAAYC,YAAZ,EAA0BC,WAA1B,IAAyChB,OAAO,CAClD;AACIiB,IAAAA,KAAK,EAAE;AACHC,MAAAA,KAAK,EAAE,EADJ;AAEHC,MAAAA,OAAO,EAAE;AAFN,KADX;AAKIC,IAAAA,QAAQ,EAAE;AACNF,MAAAA,KAAK,EAAE,EADD;AAENC,MAAAA,OAAO,EAAE;AAFH;AALd,GADkD,EAWlD,KAXkD,CAAtD;;AAcA,QAAME,iBAAiB,GAAG,MAAM;AAC5B,QAAI,CAACb,WAAL,EAAkB;AACdQ,MAAAA,WAAW,CAAC,EACR,GAAGF,SAAS,CAACQ,MADL;AAERC,QAAAA,QAAQ,EAAEC;AAFF,OAAD,EAIXV,SAAS,CAACQ,MAAV,CAAiBL,KAAjB,CAAuBE,OAAvB,IAAkCL,SAAS,CAACQ,MAAV,CAAiBF,QAAjB,CAA0BD,OAJjD,CAAX;AAMH,KAPD,MAOO;AACHH,MAAAA,WAAW,CAAC,EACR,GAAGF,SAAS,CAACQ,MADL;AAERC,QAAAA,QAAQ,EAAE;AACNL,UAAAA,KAAK,EAAE,EADD;AAENC,UAAAA,OAAO,EAAE;AAFH;AAFF,OAAD,EAOX,KAPW,CAAX;AASH;;AACDV,IAAAA,cAAc,CAACgB,QAAQ,IAAI,CAACA,QAAd,CAAd;AACH,GApBD;;AAsBA,QAAMC,iBAAiB,GAAG,MAAMC,KAAN,IAAe;AACrCA,IAAAA,KAAK,CAACC,cAAN;;AACA,QAAGpB,WAAH,EAAgB;AACZ,UAAI;AACA,YAAIqB,QAAQ,GAAG,MAAMjB,WAAW,CAC5B,6BAD4B,EAE5B,MAF4B,EAG5BkB,IAAI,CAACC,SAAL,CAAe;AACXd,UAAAA,KAAK,EAAEH,SAAS,CAACQ,MAAV,CAAiBL,KAAjB,CAAuBC,KADnB;AAEXE,UAAAA,QAAQ,EAAEN,SAAS,CAACQ,MAAV,CAAiBF,QAAjB,CAA0BF;AAFzB,SAAf,CAH4B,EAO5B;AACI,0BAAiB;AADrB,SAP4B,CAAhC;AAWAX,QAAAA,IAAI,CAACyB,KAAL,CAAWH,QAAQ,CAACI,IAAT,CAAcC,GAAzB;AACA5B,QAAAA,QAAQ,CAAC,UAAD,CAAR;AACH,OAdD,CAcE,OAAO6B,GAAP,EAAY,CAAE;;AAAA;AACnB,KAhBD,MAgBO;AACH,UAAI;AACA,YAAIN,QAAQ,GAAG,MAAMjB,WAAW,CAC5B,8BAD4B,EAE5B,MAF4B,EAG5BkB,IAAI,CAACC,SAAL,CAAe;AACXR,UAAAA,QAAQ,EAAET,SAAS,CAACQ,MAAV,CAAiBC,QAAjB,CAA0BL,KADzB;AAEXD,UAAAA,KAAK,EAAEH,SAAS,CAACQ,MAAV,CAAiBL,KAAjB,CAAuBC,KAFnB;AAGXE,UAAAA,QAAQ,EAAEN,SAAS,CAACQ,MAAV,CAAiBF,QAAjB,CAA0BF;AAHzB,SAAf,CAH4B,EAQ5B;AACI,0BAAiB;AADrB,SAR4B,CAAhC;AAYAX,QAAAA,IAAI,CAACyB,KAAL,CAAWH,QAAQ,CAACI,IAAT,CAAcC,GAAzB;AACA5B,QAAAA,QAAQ,CAAC,UAAD,CAAR;AACH,OAfD,CAeE,OAAM6B,GAAN,EAAW,CAAE;AAClB;AACJ,GApCD;;AAsCA,sBACI,QAAC,KAAD,CAAO,QAAP;AAAA,4BACI,QAAC,UAAD;AAAY,MAAA,KAAK,EAAExB,KAAnB;AAA0B,MAAA,OAAO,EAAEyB;AAAnC;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI,QAAC,IAAD;AAAM,MAAA,SAAS,EAAC,MAAhB;AAAA,iBACK1B,SAAS,iBAAI,QAAC,cAAD;AAAgB,QAAA,SAAS;AAAzB;AAAA;AAAA;AAAA;AAAA,cADlB,EAEKF,WAAW,gBAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAAH,gBAAoB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFpC,eAGI;AAAA,mBACK,CAACA,WAAD,iBACG,QAAC,KAAD;AACA,UAAA,EAAE,EAAC,UADH;AAEA,UAAA,KAAK,EAAC,UAFN;AAGA,UAAA,OAAO,EAAC,OAHR;AAIA,UAAA,UAAU,EAAE,CAACb,iBAAiB,EAAlB,CAJZ;AAKA,UAAA,SAAS,EAAC,+BALV;AAMA,UAAA,OAAO,EAAEoB;AANT;AAAA;AAAA;AAAA;AAAA,gBAFR,eAWI,QAAC,KAAD;AACI,UAAA,EAAE,EAAC,OADP;AAEI,UAAA,KAAK,EAAC,OAFV;AAGI,UAAA,OAAO,EAAC,OAHZ;AAII,UAAA,UAAU,EAAE,CAAClB,eAAe,EAAhB,CAJhB;AAKI,UAAA,SAAS,EAAC,4BALd;AAMI,UAAA,OAAO,EAAEkB;AANb;AAAA;AAAA;AAAA;AAAA,gBAXJ,EAmBK,CAACP,WAAD,iBACG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBApBR,eAsBI,QAAC,KAAD;AACI,UAAA,EAAE,EAAC,UADP;AAEI,UAAA,KAAK,EAAC,UAFV;AAGI,UAAA,OAAO,EAAC,OAHZ;AAII,UAAA,IAAI,EAAC,UAJT;AAKI,UAAA,UAAU,EAAE,CAACZ,mBAAmB,CAAC,CAAD,CAApB,CALhB;AAMI,UAAA,SAAS,EAAC,+BANd;AAOI,UAAA,OAAO,EAAEmB;AAPb;AAAA;AAAA;AAAA;AAAA,gBAtBJ,eA+BI;AAAK,UAAA,SAAS,EAAC,aAAf;AAAA,iCACI,QAAC,MAAD;AAAQ,YAAA,IAAI,EAAC,QAAb;AAAsB,YAAA,OAAO,EAAEW,iBAA/B;AAAkD,YAAA,QAAQ,EAAE,CAACZ,SAAS,CAACK,OAAvE;AAAA,sBACKX,WAAW,GAAG,OAAH,GAAa;AAD7B;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,gBA/BJ;AAAA;AAAA;AAAA;AAAA;AAAA,cAHJ,eAwCI,QAAC,MAAD;AAAQ,QAAA,OAAO,MAAf;AAAgB,QAAA,OAAO,EAAEa,iBAAzB;AAAA,iCACeb,WAAW,GAAG,QAAH,GAAc,OADxC;AAAA;AAAA;AAAA;AAAA;AAAA,cAxCJ;AAAA;AAAA;AAAA;AAAA;AAAA,YAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAiDH,CAjID;;GAAMH,I;UACeZ,W,EAGqCQ,a,EAEPD,O;;;KAN7CK,I;AAmIN,eAAeA,IAAf","sourcesContent":["import React, { useContext, useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\n\nimport Button from \"../shared/UIElemnets/Button\";\nimport { VALIDATOR_REQUIRE, VALIDATOR_MINLENGTH, VALIDATOR_EMAIL } from \"../shared/util/validators\";\nimport ErrorModal from \"../shared/UIElemnets/ErrorModal\";\nimport LoadingSpinner from \"../shared/UIElemnets/LoadingSpinner\";\nimport { useForm } from \"../shared/hooks/form-hook\";\nimport { useHttpClient } from \"../shared/hooks/http-hook\";\nimport { AuthContext } from \"../shared/context/auth-context\";\nimport Card from \"../shared/UIElemnets/Card\";\nimport Input from \"../shared/UIElemnets/Input\";\nimport \"./Auth.css\";\n\nconst Auth = () =>{\n    const navigate = useNavigate();\n    const auth = useContext(AuthContext);\n    const [isLoginMode, setIsLoginMode] = useState(true);\n    const { isLoading, error, sendRequest, clearError } = useHttpClient();\n\n    const [formState, inputHandler, setFromData] = useForm(\n        {\n            email: {\n                value: '',\n                isValid: false\n            },\n            password: {\n                value: '',\n                isValid: false\n            },\n        },\n        false\n    );\n\n    const switchModeHandler = () => {\n        if (!isLoginMode) {\n            setFromData({\n                ...formState.inputs,\n                username: undefined\n            },\n            formState.inputs.email.isValid && formState.inputs.password.isValid\n            );\n        } else {\n            setFromData({\n                ...formState.inputs,\n                username: {\n                    value: '',\n                    isValid: false\n                }\n            },\n            false\n            );\n        }\n        setIsLoginMode(prevMode => !prevMode);\n    };\n\n    const authSubmithandler = async event => {\n        event.preventDefault();\n        if(isLoginMode) {\n            try {\n                let response = await sendRequest(\n                    'http://localhost:4000/login',\n                    'POST', \n                    JSON.stringify({\n                        email: formState.inputs.email.value,\n                        password: formState.inputs.password.value\n                    }),\n                    {\n                        'Content-Type' : 'application/json'\n                    }\n                );\n                auth.login(response.user._id);\n                navigate('/parties');\n            } catch (err) {};\n        } else {\n            try {\n                let response = await sendRequest(\n                    'http://localhost:4000/signup', \n                    'POST',\n                    JSON.stringify({\n                        username: formState.inputs.username.value,\n                        email: formState.inputs.email.value,\n                        password: formState.inputs.password.value\n                    }),\n                    {\n                        'Content-Type' : 'application/json'\n                    }\n                );\n                auth.login(response.user._id);\n                navigate('/parties');\n            } catch(err) {}\n        }\n    };\n\n    return (\n        <React.Fragment>\n            <ErrorModal error={error} onClear={errorHandler} />\n            <Card className=\"auth\">\n                {isLoading && <LoadingSpinner asOverlay/>}\n                {isLoginMode ? <h2>LOGIN</h2> : <h2>SIGNUP</h2>}\n                <form>\n                    {!isLoginMode && (\n                        <Input \n                        id=\"username\" \n                        label=\"username\" \n                        element=\"input\" \n                        validators={[VALIDATOR_REQUIRE()]} \n                        errorText=\"Plaese enter a valid username\"\n                        onInput={inputHandler}\n                        />\n                        )}\n                    <Input \n                        id=\"email\" \n                        label=\"email\" \n                        element=\"input\" \n                        validators={[VALIDATOR_EMAIL()]} \n                        errorText=\"Plaese enter a valid email\"\n                        onInput={inputHandler}\n                        />\n                    {!isLoginMode && (\n                        <h3>IMAGE UPLOAD</h3>\n                        )}\n                    <Input \n                        id=\"password\" \n                        label=\"password\" \n                        element=\"input\" \n                        type=\"password\" \n                        validators={[VALIDATOR_MINLENGTH(6)]} \n                        errorText=\"Plaese enter a valid password\"\n                        onInput={inputHandler}\n                        />\n                    <div className=\"auth-footer\">\n                        <Button type=\"button\" onClick={authSubmithandler} disabled={!formState.isValid}>\n                            {isLoginMode ? 'LOGIN' : 'SIGNUP'}\n                        </Button>\n                    </div>\n                </form>\n                <Button inverse onClick={switchModeHandler}>\n                    SWITCH TO {isLoginMode ? 'SIGNUP' : 'LOGIN'}\n                </Button>\n            </Card>\n        </React.Fragment>\n    )\n}\n\nexport default Auth;"]},"metadata":{},"sourceType":"module"}