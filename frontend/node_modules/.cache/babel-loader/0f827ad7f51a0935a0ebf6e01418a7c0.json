{"ast":null,"code":"var _jsxFileName = \"/Users/davegb313/code/new-parties-project/frontend/src/parties/pages/NewParty.js\",\n    _s = $RefreshSig$();\n\nimport React, { useContext } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport Button from \"../../shared/UIElemnets/Button\";\nimport Card from \"../../shared/UIElemnets/Card\";\nimport Input from \"../../shared/UIElemnets/Input\";\nimport ErrorModal from \"../../shared/UIElemnets/ErrorModal\";\nimport LoadingSpinner from \"../../shared/UIElemnets/LoadingSpinner\";\nimport { VALIDATOR_REQUIRE, VALIDATOR_MINLENGTH } from \"../../shared/util/validators\";\nimport { useForm } from \"../../shared/hooks/form-hook\";\nimport { useHttpClient } from \"../../shared/hooks/http-hook\";\nimport { AuthContext } from \"../../shared/context/auth-context\";\nimport \"./NewParty.css\";\nimport ImageUpload from \"../../shared/UIElemnets/ImageUpload\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst NewParty = props => {\n  _s();\n\n  const auth = useContext(AuthContext);\n  const navigate = useNavigate();\n  const {\n    isLoading,\n    error,\n    sendRequest,\n    clearError\n  } = useHttpClient();\n  const [formState, inputHandler] = useForm({\n    title: {\n      value: '',\n      isValid: false\n    },\n    description: {\n      value: '',\n      isValid: false\n    },\n    address: {\n      value: '',\n      isValid: false\n    },\n    image: {\n      value: null,\n      isValid: false\n    }\n  }, false);\n\n  const submitHandler = async event => {\n    event.preventDefault();\n\n    try {\n      let formData = new FormData();\n      formData.append('title', formState.inputs.title.value);\n      formData.append('description', formState.inputs.description.value);\n      formData.append('address', formState.inputs.address.value);\n      formData.append('creator', auth.userId);\n      formData.append('image', formState.inputs.image.value);\n      await sendRequest('http://localhost:4000/parties/new', 'POST', formData);\n      navigate('/parties/all');\n    } catch (err) {}\n  };\n\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(ErrorModal, {\n      error: error,\n      onClear: clearError\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Card, {\n      className: \"new-party\",\n      children: /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: submitHandler,\n        children: [isLoading && /*#__PURE__*/_jsxDEV(LoadingSpinner, {\n          asOverlay: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 31\n        }, this), /*#__PURE__*/_jsxDEV(Input, {\n          id: \"title\",\n          label: \"Name your party:\",\n          element: \"input\",\n          validators: [VALIDATOR_REQUIRE()],\n          errorText: \"Plaese enter a valid party-title\",\n          onInput: inputHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Input, {\n          id: \"description\",\n          label: \"What's goin on there(description):\",\n          element: \"input\",\n          validators: [VALIDATOR_MINLENGTH(5)],\n          errorText: \"Plaese enter a valid party-description(min. 5 symbols)\",\n          onInput: inputHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(ImageUpload, {\n          id: \"image\",\n          onInput: inputHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Input, {\n          id: \"address\",\n          label: \"Address:\",\n          element: \"input\",\n          validators: [VALIDATOR_REQUIRE()],\n          errorText: \"Plaese enter a valid party-address\",\n          onInput: inputHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          type: \"submit\",\n          disabled: !formState.isValid,\n          children: \"CREATE PARTY\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 9\n  }, this);\n};\n\n_s(NewParty, \"D5pIW3swAPgC5Q9upzgaTV0j2jI=\", false, function () {\n  return [useNavigate, useHttpClient, useForm];\n});\n\n_c = NewParty;\nexport default NewParty;\n\nvar _c;\n\n$RefreshReg$(_c, \"NewParty\");","map":{"version":3,"sources":["/Users/davegb313/code/new-parties-project/frontend/src/parties/pages/NewParty.js"],"names":["React","useContext","useNavigate","Button","Card","Input","ErrorModal","LoadingSpinner","VALIDATOR_REQUIRE","VALIDATOR_MINLENGTH","useForm","useHttpClient","AuthContext","ImageUpload","NewParty","props","auth","navigate","isLoading","error","sendRequest","clearError","formState","inputHandler","title","value","isValid","description","address","image","submitHandler","event","preventDefault","formData","FormData","append","inputs","userId","err"],"mappings":"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","sourcesContent":["import React, { useContext } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\n\nimport Button from \"../../shared/UIElemnets/Button\";\nimport Card from \"../../shared/UIElemnets/Card\";\nimport Input from \"../../shared/UIElemnets/Input\";\nimport ErrorModal from \"../../shared/UIElemnets/ErrorModal\";\nimport LoadingSpinner from \"../../shared/UIElemnets/LoadingSpinner\";\nimport { VALIDATOR_REQUIRE, VALIDATOR_MINLENGTH } from \"../../shared/util/validators\";\nimport { useForm } from \"../../shared/hooks/form-hook\";\nimport { useHttpClient } from \"../../shared/hooks/http-hook\";\nimport { AuthContext } from \"../../shared/context/auth-context\";\nimport \"./NewParty.css\"\nimport ImageUpload from \"../../shared/UIElemnets/ImageUpload\";\n\nconst NewParty = props => {\n    const auth = useContext(AuthContext);\n    const navigate = useNavigate();\n    const {isLoading, error, sendRequest, clearError} = useHttpClient();\n    const [formState, inputHandler] = useForm(\n        {\n            title: {\n                value: '',\n                isValid: false\n            },\n            description: {\n                value: '',\n                isValid: false\n            },\n            address: {\n                value: '',\n                isValid: false\n            },\n            image: {\n                value: null,\n                isValid: false\n            }\n        },\n        false\n    );\n    \n    const submitHandler = async event => {\n        event.preventDefault();\n        try {\n            let formData = new FormData();\n            formData.append('title', formState.inputs.title.value);\n            formData.append('description', formState.inputs.description.value);\n            formData.append('address', formState.inputs.address.value);\n            formData.append('creator', auth.userId);\n            formData.append('image', formState.inputs.image.value);\n            await sendRequest(\n                'http://localhost:4000/parties/new',\n                'POST',\n                formData);\n            navigate('/parties/all');\n            } catch (err) {}\n        }\n\n    return (\n        <React.Fragment>\n            <ErrorModal error={error} onClear={clearError} />\n            <Card className=\"new-party\">\n                <form onSubmit={submitHandler}>\n                {isLoading && <LoadingSpinner asOverlay/>}\n                    <Input \n                        id=\"title\" \n                        label=\"Name your party:\" \n                        element=\"input\" \n                        validators={[VALIDATOR_REQUIRE()]} \n                        errorText=\"Plaese enter a valid party-title\"\n                        onInput={inputHandler}\n                    />\n                    <Input \n                        id=\"description\" \n                        label=\"What's goin on there(description):\" \n                        element=\"input\" \n                        validators={[VALIDATOR_MINLENGTH(5)]} \n                        errorText=\"Plaese enter a valid party-description(min. 5 symbols)\"\n                        onInput={inputHandler}\n                    />\n                    <ImageUpload id='image' onInput={inputHandler}/>\n                    <Input \n                        id=\"address\" \n                        label=\"Address:\" \n                        element=\"input\" \n                        validators={[VALIDATOR_REQUIRE()]} \n                        errorText=\"Plaese enter a valid party-address\"\n                        onInput={inputHandler}\n                    />\n                    <Button type=\"submit\" disabled={!formState.isValid}>CREATE PARTY</Button>\n                </form>\n            </Card>\n        </React.Fragment>\n    \n    )\n}\n\nexport default NewParty;"]},"metadata":{},"sourceType":"module"}