{"ast":null,"code":"var _jsxFileName = \"/Users/davegb313/code/new-parties-project/frontend/src/shared/UIElemnets/ImageUpload.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from \"react\";\nimport Button from \"./Button\";\nimport './ImageUpload.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ImageUpload = props => {\n  _s();\n\n  const [file, setFile] = useState();\n  const [previewUrl, setPreviewUrl] = useState();\n  const [isValid, setIsValid] = useState(false);\n  const filePickerRef = useRef();\n\n  const pickImageHandler = () => filePickerRef.current.click();\n\n  useEffect(() => {\n    if (!file) {\n      return;\n    }\n\n    const fileReader = new FileReader();\n\n    fileReader.onload = () => {\n      setPreviewUrl(fileReader.result);\n    };\n\n    fileReader.readAsDataURL(file);\n  }, [file]);\n\n  const pickedHandler = event => {\n    let pickedFile;\n    let fileValidity = isValid;\n\n    if (event.target.files && event.targent.files.length === 1) {\n      pickedFile = event.target.files[0];\n      setFile(pickedFile);\n      setIsValid(true);\n      fileValidity = true;\n    } else {\n      setIsValid(false);\n      fileValidity = false;\n    }\n\n    props.onInput(props.id, pickedFile, fileValidity);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"form-control\",\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      id: props.id,\n      style: {\n        display: \"none\"\n      },\n      ref: filePickerRef,\n      type: \"file\",\n      accept: \".jpg,.png,.jpeg\",\n      onChange: pickedHandler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"image-upload\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"image-upload-preview\",\n        children: [previewUrl && /*#__PURE__*/_jsxDEV(\"img\", {\n          src: previewUrl,\n          alt: \"Preview\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 36\n        }, this), !previewUrl && /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Please pick an image.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 37\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        type: \"button\",\n        onClick: pickImageHandler,\n        children: \"PICK IMAGE\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }, this), !isValid && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: props.errorText\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 26\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 9\n  }, this);\n};\n\n_s(ImageUpload, \"F3L6Dk3MgM9L1Bkths28Unzoj0Y=\");\n\n_c = ImageUpload;\nexport default ImageUpload;\n\nvar _c;\n\n$RefreshReg$(_c, \"ImageUpload\");","map":{"version":3,"sources":["/Users/davegb313/code/new-parties-project/frontend/src/shared/UIElemnets/ImageUpload.js"],"names":["React","useState","useEffect","useRef","Button","ImageUpload","props","file","setFile","previewUrl","setPreviewUrl","isValid","setIsValid","filePickerRef","pickImageHandler","current","click","fileReader","FileReader","onload","result","readAsDataURL","pickedHandler","event","pickedFile","fileValidity","target","files","targent","length","onInput","id","display","errorText"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\n\nimport Button from \"./Button\";\nimport './ImageUpload.css';\n\nconst ImageUpload = props => {\n    const [file, setFile] = useState();\n    const [previewUrl, setPreviewUrl] = useState();\n    const [isValid, setIsValid] = useState(false);\n    const filePickerRef = useRef()\n\n    const pickImageHandler = () => filePickerRef.current.click();\n\n    useEffect(()=> {\n        if (!file) {\n            return;\n        } \n        const fileReader = new FileReader();\n        fileReader.onload = () => {\n            setPreviewUrl(fileReader.result);\n        };\n        fileReader.readAsDataURL(file);\n    }, [file]);\n\n    const pickedHandler = event => {\n        let pickedFile\n        let fileValidity = isValid;\n        if (event.target.files && event.targent.files.length === 1) {\n            pickedFile = event.target.files[0];\n            setFile(pickedFile);\n            setIsValid(true);\n            fileValidity = true;\n        } else {\n            setIsValid(false);\n            fileValidity = false;\n        }\n        props.onInput(props.id, pickedFile, fileValidity);\n    }\n\n    return (\n        <div className=\"form-control\">\n            <input \n                id={props.id} \n                style={{ display: \"none\" }}\n                ref={filePickerRef}\n                type=\"file\" \n                accept=\".jpg,.png,.jpeg\"\n                onChange={pickedHandler}\n            />\n            <div className=\"image-upload\">\n                <div className=\"image-upload-preview\">\n                    {previewUrl && <img src={previewUrl} alt='Preview' />}\n                    {!previewUrl && <p>Please pick an image.</p>}\n                </div>\n                <Button type=\"button\" onClick={pickImageHandler}>PICK IMAGE</Button>\n            </div>\n            {!isValid && <p>{props.errorText}</p>}\n        </div>\n    )\n}\n\nexport default ImageUpload;"]},"metadata":{},"sourceType":"module"}