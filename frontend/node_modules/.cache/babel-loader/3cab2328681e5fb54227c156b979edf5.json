{"ast":null,"code":"var _jsxFileName = \"/Users/davegb313/code/parties/frontend/src/user/Auth.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport Button from \"../shared/UIElemnets/Button\";\nimport { VALIDATOR_REQUIRE, VALIDATOR_MINLENGTH, VALIDATOR_EMAIL } from \"../shared/util/validators\";\nimport { useForm } from \"../shared/hooks/form-hook\";\nimport Card from \"../shared/UIElemnets/Card\";\nimport Input from \"../shared/UIElemnets/Input\";\nimport \"./Auth.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Auth = props => {\n  _s();\n\n  const [isLoginMode, setIsLoginMode] = useState(true);\n  const [formState, inputHandler, setFromData] = useForm({\n    username: {\n      value: '',\n      isValid: false\n    },\n    password: {\n      value: '',\n      isValid: false\n    }\n  }, false);\n\n  const switchModeHandler = () => {\n    if (!isLoginMode) {\n      setFromData({ ...formState.inputs,\n        name: undefined,\n        image: undefined\n      }, formState.inputs.email.isValid && formState.inputs.password.isValid);\n    } else {\n      setFromData({ ...formState.inputs,\n        name: {\n          value: '',\n          isValid: false\n        },\n        image: {\n          value: '',\n          isValid: false\n        }\n      }, false);\n    }\n\n    setIsLoginMode(prevMode => !prevMode);\n  };\n\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: isLoginMode ? /*#__PURE__*/_jsxDEV(Card, {\n      className: \"auth\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"LOGIN\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        children: [/*#__PURE__*/_jsxDEV(Input, {\n          id: \"username\",\n          label: \"username\",\n          element: \"input\",\n          validators: [VALIDATOR_REQUIRE()],\n          errorText: \"Plaese enter a valid username\",\n          onInput: inputHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(Input, {\n          id: \"password\",\n          label: \"password\",\n          element: \"input\",\n          type: \"password\",\n          validators: [VALIDATOR_MINLENGTH(6)],\n          errorText: \"Plaese enter a valid password\",\n          onInput: inputHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"auth-footer\",\n          children: [/*#__PURE__*/_jsxDEV(Button, {\n            inverse: true,\n            onClick: switchModeHandler,\n            children: [\"SWITCH TO \", isLoginMode ? 'SIGNUP' : 'LOGIN']\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            children: \"LOGIN\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(Card, {\n      className: \"auth\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"SIGNUP\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(Input, {\n        id: \"username\",\n        label: \"username\",\n        element: \"input\",\n        validators: [VALIDATOR_REQUIRE()],\n        errorText: \"Plaese enter a valid username\",\n        onInput: inputHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(Input, {\n        id: \"email\",\n        label: \"email\",\n        element: \"input\",\n        validators: [VALIDATOR_EMAIL()],\n        errorText: \"Plaese enter a valid email\",\n        onInput: inputHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"IMAGE UPLOAD\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(Input, {\n        id: \"password\",\n        label: \"password\",\n        element: \"input\",\n        type: \"password\",\n        validators: [VALIDATOR_MINLENGTH(4)],\n        errorText: \"Plaese enter a valid password\",\n        onInput: inputHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"auth-footer\",\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          inverse: true,\n          onClick: switchModeHandler,\n          children: [\"SWITCH TO \", isLoginMode ? 'SIGNUP' : 'LOGIN']\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          children: \"SIGNUP\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 17\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Auth, \"MD8ww3Im79RkGhyeGLGKJhL9o7Y=\", false, function () {\n  return [useForm];\n});\n\n_c = Auth;\nexport default Auth;\n\nvar _c;\n\n$RefreshReg$(_c, \"Auth\");","map":{"version":3,"sources":["/Users/davegb313/code/parties/frontend/src/user/Auth.js"],"names":["React","useState","Button","VALIDATOR_REQUIRE","VALIDATOR_MINLENGTH","VALIDATOR_EMAIL","useForm","Card","Input","Auth","props","isLoginMode","setIsLoginMode","formState","inputHandler","setFromData","username","value","isValid","password","switchModeHandler","inputs","name","undefined","image","email","prevMode"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AAEA,OAAOC,MAAP,MAAmB,6BAAnB;AACA,SAASC,iBAAT,EAA4BC,mBAA5B,EAAiDC,eAAjD,QAAwE,2BAAxE;AACA,SAASC,OAAT,QAAwB,2BAAxB;AACA,OAAOC,IAAP,MAAiB,2BAAjB;AACA,OAAOC,KAAP,MAAkB,4BAAlB;AACA,OAAO,YAAP;;;AAEA,MAAMC,IAAI,GAAGC,KAAK,IAAG;AAAA;;AACjB,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCX,QAAQ,CAAC,IAAD,CAA9C;AAEA,QAAM,CAACY,SAAD,EAAYC,YAAZ,EAA0BC,WAA1B,IAAyCT,OAAO,CAClD;AACIU,IAAAA,QAAQ,EAAE;AACNC,MAAAA,KAAK,EAAE,EADD;AAENC,MAAAA,OAAO,EAAE;AAFH,KADd;AAKIC,IAAAA,QAAQ,EAAE;AACNF,MAAAA,KAAK,EAAE,EADD;AAENC,MAAAA,OAAO,EAAE;AAFH;AALd,GADkD,EAWlD,KAXkD,CAAtD;;AAcA,QAAME,iBAAiB,GAAG,MAAM;AAC5B,QAAI,CAACT,WAAL,EAAkB;AACdI,MAAAA,WAAW,CAAC,EACR,GAAGF,SAAS,CAACQ,MADL;AAERC,QAAAA,IAAI,EAAEC,SAFE;AAGRC,QAAAA,KAAK,EAAED;AAHC,OAAD,EAKXV,SAAS,CAACQ,MAAV,CAAiBI,KAAjB,CAAuBP,OAAvB,IAAkCL,SAAS,CAACQ,MAAV,CAAiBF,QAAjB,CAA0BD,OALjD,CAAX;AAOH,KARD,MAQO;AACHH,MAAAA,WAAW,CAAC,EACR,GAAGF,SAAS,CAACQ,MADL;AAERC,QAAAA,IAAI,EAAE;AACFL,UAAAA,KAAK,EAAE,EADL;AAEFC,UAAAA,OAAO,EAAE;AAFP,SAFE;AAMRM,QAAAA,KAAK,EAAE;AACHP,UAAAA,KAAK,EAAE,EADJ;AAEHC,UAAAA,OAAO,EAAE;AAFN;AANC,OAAD,EAWX,KAXW,CAAX;AAaH;;AACDN,IAAAA,cAAc,CAACc,QAAQ,IAAI,CAACA,QAAd,CAAd;AACH,GAzBD;;AA2BA,sBACI,QAAC,KAAD,CAAO,QAAP;AAAA,cACKf,WAAW,gBACR,QAAC,IAAD;AAAM,MAAA,SAAS,EAAC,MAAhB;AAAA,8BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI;AAAA,gCACI,QAAC,KAAD;AACI,UAAA,EAAE,EAAC,UADP;AAEI,UAAA,KAAK,EAAC,UAFV;AAGI,UAAA,OAAO,EAAC,OAHZ;AAII,UAAA,UAAU,EAAE,CAACR,iBAAiB,EAAlB,CAJhB;AAKI,UAAA,SAAS,EAAC,+BALd;AAMI,UAAA,OAAO,EAAEW;AANb;AAAA;AAAA;AAAA;AAAA,gBADJ,eASI,QAAC,KAAD;AACI,UAAA,EAAE,EAAC,UADP;AAEI,UAAA,KAAK,EAAC,UAFV;AAGI,UAAA,OAAO,EAAC,OAHZ;AAII,UAAA,IAAI,EAAC,UAJT;AAKI,UAAA,UAAU,EAAE,CAACV,mBAAmB,CAAC,CAAD,CAApB,CALhB;AAMI,UAAA,SAAS,EAAC,+BANd;AAOI,UAAA,OAAO,EAAEU;AAPb;AAAA;AAAA;AAAA;AAAA,gBATJ,eAkBI;AAAK,UAAA,SAAS,EAAC,aAAf;AAAA,kCACI,QAAC,MAAD;AAAQ,YAAA,OAAO,MAAf;AAAgB,YAAA,OAAO,EAAEM,iBAAzB;AAAA,qCACeT,WAAW,GAAG,QAAH,GAAc,OADxC;AAAA;AAAA;AAAA;AAAA;AAAA,kBADJ,eAII,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAJJ;AAAA;AAAA;AAAA;AAAA;AAAA,gBAlBJ;AAAA;AAAA;AAAA;AAAA;AAAA,cAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADQ,gBA8BR,QAAC,IAAD;AAAM,MAAA,SAAS,EAAC,MAAhB;AAAA,8BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI,QAAC,KAAD;AACI,QAAA,EAAE,EAAC,UADP;AAEI,QAAA,KAAK,EAAC,UAFV;AAGI,QAAA,OAAO,EAAC,OAHZ;AAII,QAAA,UAAU,EAAE,CAACR,iBAAiB,EAAlB,CAJhB;AAKI,QAAA,SAAS,EAAC,+BALd;AAMI,QAAA,OAAO,EAAEW;AANb;AAAA;AAAA;AAAA;AAAA,cAFJ,eAUI,QAAC,KAAD;AACI,QAAA,EAAE,EAAC,OADP;AAEI,QAAA,KAAK,EAAC,OAFV;AAGI,QAAA,OAAO,EAAC,OAHZ;AAII,QAAA,UAAU,EAAE,CAACT,eAAe,EAAhB,CAJhB;AAKI,QAAA,SAAS,EAAC,4BALd;AAMI,QAAA,OAAO,EAAES;AANb;AAAA;AAAA;AAAA;AAAA,cAVJ,eAkBI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAlBJ,eAmBI,QAAC,KAAD;AACI,QAAA,EAAE,EAAC,UADP;AAEI,QAAA,KAAK,EAAC,UAFV;AAGI,QAAA,OAAO,EAAC,OAHZ;AAII,QAAA,IAAI,EAAC,UAJT;AAKI,QAAA,UAAU,EAAE,CAACV,mBAAmB,CAAC,CAAD,CAApB,CALhB;AAMI,QAAA,SAAS,EAAC,+BANd;AAOI,QAAA,OAAO,EAAEU;AAPb;AAAA;AAAA;AAAA;AAAA,cAnBJ,eA4BI;AAAK,QAAA,SAAS,EAAC,aAAf;AAAA,gCACI,QAAC,MAAD;AAAQ,UAAA,OAAO,MAAf;AAAgB,UAAA,OAAO,EAAEM,iBAAzB;AAAA,mCACeT,WAAW,GAAG,QAAH,GAAc,OADxC;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,eAII,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAJJ;AAAA;AAAA;AAAA;AAAA;AAAA,cA5BJ;AAAA;AAAA;AAAA;AAAA;AAAA;AA/BR;AAAA;AAAA;AAAA;AAAA,UADJ;AAuEH,CAnHD;;GAAMF,I;UAG6CH,O;;;KAH7CG,I;AAqHN,eAAeA,IAAf","sourcesContent":["import React, { useState } from \"react\";\n\nimport Button from \"../shared/UIElemnets/Button\";\nimport { VALIDATOR_REQUIRE, VALIDATOR_MINLENGTH, VALIDATOR_EMAIL } from \"../shared/util/validators\";\nimport { useForm } from \"../shared/hooks/form-hook\";\nimport Card from \"../shared/UIElemnets/Card\";\nimport Input from \"../shared/UIElemnets/Input\";\nimport \"./Auth.css\";\n\nconst Auth = props =>{\n    const [isLoginMode, setIsLoginMode] = useState(true)\n\n    const [formState, inputHandler, setFromData] = useForm(\n        {\n            username: {\n                value: '',\n                isValid: false\n            },\n            password: {\n                value: '',\n                isValid: false\n            },\n        },\n        false\n    );\n\n    const switchModeHandler = () => {\n        if (!isLoginMode) {\n            setFromData({\n                ...formState.inputs,\n                name: undefined,\n                image: undefined\n            },\n            formState.inputs.email.isValid && formState.inputs.password.isValid\n            );\n        } else {\n            setFromData({\n                ...formState.inputs,\n                name: {\n                    value: '',\n                    isValid: false\n                },\n                image: {\n                    value: '',\n                    isValid: false\n                }\n            },\n            false\n            );\n        }\n        setIsLoginMode(prevMode => !prevMode);\n    }\n\n    return (\n        <React.Fragment>\n            {isLoginMode ? (\n                <Card className=\"auth\">\n                    <h2>LOGIN</h2>\n                    <form>\n                        <Input \n                            id=\"username\" \n                            label=\"username\" \n                            element=\"input\" \n                            validators={[VALIDATOR_REQUIRE()]} \n                            errorText=\"Plaese enter a valid username\"\n                            onInput={inputHandler}\n                        />\n                        <Input \n                            id=\"password\" \n                            label=\"password\" \n                            element=\"input\" \n                            type=\"password\" \n                            validators={[VALIDATOR_MINLENGTH(6)]} \n                            errorText=\"Plaese enter a valid password\"\n                            onInput={inputHandler}\n                        />\n                        <div className=\"auth-footer\">\n                            <Button inverse onClick={switchModeHandler}>\n                                SWITCH TO {isLoginMode ? 'SIGNUP' : 'LOGIN'}\n                            </Button>\n                            <Button>LOGIN</Button>\n                        </div>\n                        </form>\n                </Card>\n                ) : (\n                <Card className=\"auth\">\n                    <h2>SIGNUP</h2>\n                    <Input \n                        id=\"username\" \n                        label=\"username\" \n                        element=\"input\" \n                        validators={[VALIDATOR_REQUIRE()]} \n                        errorText=\"Plaese enter a valid username\"\n                        onInput={inputHandler}\n                    />\n                    <Input \n                        id=\"email\" \n                        label=\"email\" \n                        element=\"input\" \n                        validators={[VALIDATOR_EMAIL()]} \n                        errorText=\"Plaese enter a valid email\"\n                        onInput={inputHandler}\n                    />\n                    <h3>IMAGE UPLOAD</h3>\n                    <Input \n                        id=\"password\" \n                        label=\"password\" \n                        element=\"input\" \n                        type=\"password\" \n                        validators={[VALIDATOR_MINLENGTH(4)]} \n                        errorText=\"Plaese enter a valid password\"\n                        onInput={inputHandler} \n                    />\n                    <div className=\"auth-footer\">\n                        <Button inverse onClick={switchModeHandler}>\n                            SWITCH TO {isLoginMode ? 'SIGNUP' : 'LOGIN'}\n                        </Button>\n                        <Button>SIGNUP</Button>\n                    </div>\n                </Card>\n                )\n            }\n        </React.Fragment>\n    )\n}\n\nexport default Auth;"]},"metadata":{},"sourceType":"module"}