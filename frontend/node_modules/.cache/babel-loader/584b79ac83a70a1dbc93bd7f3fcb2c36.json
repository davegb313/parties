{"ast":null,"code":"var _jsxFileName = \"/Users/davegb313/code/new-parties-project/frontend/src/parties/pages/Parties.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport PartyList from \"../components/PartyList\";\nimport ErrorModal from \"../../shared/UIElemnets/ErrorModal\";\nimport LoadingSpinner from \"../../shared/UIElemnets/LoadingSpinner\";\nimport \"./Parties.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Parties = () => {\n  _s();\n\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(undefined);\n  const [loadedParties, setLoadedParties] = useState();\n  useEffect(() => {\n    // const sendRequest = async () => {\n    //     setIsLoading(true);\n    //     try {\n    //         const response = await fetch('http://localhost:4000/parties');\n    //         if (!response.ok) {\n    //             throw new Error(resData.message);\n    //         }\n    //         setLoadedParties(resData.allParties);\n    //         const resData = await response.json();\n    //     } catch (err) {\n    //         setError(err);\n    //     }\n    //     setIsLoading(false);\n    // };\n    let sendRequest = () => {\n      setIsLoading(true);\n      fetch('http://localhost:4000/parties').then(res => {\n        if (!res.ok) {\n          throw new Error(res.message);\n        } else {\n          return res;\n        }\n      }).then(res => res.json()).then(par => setLoadedParties(par.allParties)).catch(err => setError(err));\n      setIsLoading(false);\n    };\n\n    sendRequest();\n  }, []);\n\n  const errorHandler = () => {\n    setError(null);\n  };\n\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"parties\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"parties-header\",\n        children: /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Parties\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(ErrorModal, {\n        error: error,\n        onClick: errorHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 13\n      }, this), isLoading && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"center\",\n        children: /*#__PURE__*/_jsxDEV(LoadingSpinner, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 17\n      }, this), !isLoading && loadedParties && /*#__PURE__*/_jsxDEV(PartyList, {\n        items: loadedParties,\n        isLoggedIn: false\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 45\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Parties, \"1ElPdPayL8/QUmKCiWiItpQYSPU=\");\n\n_c = Parties;\nexport default Parties;\n\nvar _c;\n\n$RefreshReg$(_c, \"Parties\");","map":{"version":3,"sources":["/Users/davegb313/code/new-parties-project/frontend/src/parties/pages/Parties.js"],"names":["React","useEffect","useState","PartyList","ErrorModal","LoadingSpinner","Parties","isLoading","setIsLoading","error","setError","undefined","loadedParties","setLoadedParties","sendRequest","fetch","then","res","ok","Error","message","json","par","allParties","catch","err","errorHandler"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AAEA,OAAOC,SAAP,MAAsB,yBAAtB;AACA,OAAOC,UAAP,MAAuB,oCAAvB;AACA,OAAOC,cAAP,MAA2B,wCAA3B;AACA,OAAO,eAAP;;;AAEA,MAAMC,OAAO,GAAG,MAAM;AAAA;;AAClB,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BN,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM,CAACO,KAAD,EAAQC,QAAR,IAAoBR,QAAQ,CAACS,SAAD,CAAlC;AACA,QAAM,CAACC,aAAD,EAAgBC,gBAAhB,IAAoCX,QAAQ,EAAlD;AAEAD,EAAAA,SAAS,CAAC,MAAK;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAIa,WAAW,GAAG,MAAK;AACnBN,MAAAA,YAAY,CAAC,IAAD,CAAZ;AACAO,MAAAA,KAAK,CAAC,+BAAD,CAAL,CACKC,IADL,CACUC,GAAG,IAAG;AACR,YAAI,CAACA,GAAG,CAACC,EAAT,EAAa;AACT,gBAAM,IAAIC,KAAJ,CAAUF,GAAG,CAACG,OAAd,CAAN;AACH,SAFD,MAEO;AACH,iBAAOH,GAAP;AACH;AACJ,OAPL,EAQKD,IARL,CAQUC,GAAG,IAAEA,GAAG,CAACI,IAAJ,EARf,EASKL,IATL,CASUM,GAAG,IAAGT,gBAAgB,CAACS,GAAG,CAACC,UAAL,CAThC,EAUKC,KAVL,CAUWC,GAAG,IAAGf,QAAQ,CAACe,GAAD,CAVzB;AAWAjB,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACH,KAdD;;AAeAM,IAAAA,WAAW;AACd,GA/BQ,EA+BN,EA/BM,CAAT;;AAiCA,QAAMY,YAAY,GAAG,MAAM;AACvBhB,IAAAA,QAAQ,CAAC,IAAD,CAAR;AACH,GAFD;;AAIA,sBACA,QAAC,KAAD,CAAO,QAAP;AAAA,2BACI;AAAK,MAAA,SAAS,EAAC,SAAf;AAAA,8BACI;AAAK,QAAA,SAAS,EAAC,gBAAf;AAAA,+BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,cADJ,eAII,QAAC,UAAD;AAAY,QAAA,KAAK,EAAED,KAAnB;AAA0B,QAAA,OAAO,EAAEiB;AAAnC;AAAA;AAAA;AAAA;AAAA,cAJJ,EAKKnB,SAAS,iBACN;AAAK,QAAA,SAAS,EAAC,QAAf;AAAA,+BACI,QAAC,cAAD;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,cANR,EAUK,CAACA,SAAD,IAAcK,aAAd,iBAA+B,QAAC,SAAD;AAAW,QAAA,KAAK,EAAEA,aAAlB;AAAiC,QAAA,UAAU,EAAE;AAA7C;AAAA;AAAA;AAAA;AAAA,cAVpC;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADA;AAeH,CAzDD;;GAAMN,O;;KAAAA,O;AA2DN,eAAeA,OAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\n\nimport PartyList from \"../components/PartyList\";\nimport ErrorModal from \"../../shared/UIElemnets/ErrorModal\";\nimport LoadingSpinner from \"../../shared/UIElemnets/LoadingSpinner\";\nimport \"./Parties.css\";\n\nconst Parties = () => {\n    const [isLoading, setIsLoading] = useState(false);\n    const [error, setError] = useState(undefined);\n    const [loadedParties, setLoadedParties] = useState();\n\n    useEffect(()=> {\n        // const sendRequest = async () => {\n        //     setIsLoading(true);\n        //     try {\n        //         const response = await fetch('http://localhost:4000/parties');\n        //         if (!response.ok) {\n        //             throw new Error(resData.message);\n        //         }\n        //         setLoadedParties(resData.allParties);\n        //         const resData = await response.json();\n        //     } catch (err) {\n        //         setError(err);\n        //     }\n        //     setIsLoading(false);\n        // };\n        let sendRequest = ()=> {\n            setIsLoading(true);\n            fetch('http://localhost:4000/parties')\n                .then(res=> {\n                    if (!res.ok) {\n                        throw new Error(res.message);\n                    } else {\n                        return res;\n                    }\n                })\n                .then(res=>res.json())\n                .then(par=> setLoadedParties(par.allParties))\n                .catch(err=> setError(err));\n            setIsLoading(false);\n        };\n        sendRequest()\n    }, []);\n\n    const errorHandler = () => {\n        setError(null);\n    };\n\n    return (\n    <React.Fragment> \n        <div className=\"parties\">\n            <div className=\"parties-header\">\n                <h1>Parties</h1>\n            </div>\n            <ErrorModal error={error} onClick={errorHandler} />\n            {isLoading && (\n                <div className=\"center\">\n                    <LoadingSpinner />\n                </div>\n            )}\n            {!isLoading && loadedParties && <PartyList items={loadedParties} isLoggedIn={false}/>}\n        </div>\n    </React.Fragment>);\n}\n\nexport default Parties;"]},"metadata":{},"sourceType":"module"}