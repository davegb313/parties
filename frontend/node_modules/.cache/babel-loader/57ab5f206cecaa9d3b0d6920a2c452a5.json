{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useCallback, useEffect } from \"react\";\nlet logoutTimer;\nexport const useAuth = () => {\n  _s();\n\n  const [token, setToken] = useState(false);\n  const [tokenExperationDate, setTokenExpirationDate] = useState();\n  const [userId, setUserId] = useState(undefined);\n  const login = useCallback((uid, token, expirationDate) => {\n    setToken(token);\n    setUserId(uid);\n    const tokenExpirationDate = expirationDate || new Date(new Date().getTime() + 1000 * 3600);\n    setTokenExpirationDate(tokenExpirationDate);\n    localStorage.setItem('userData', JSON.stringify({\n      userId: uid,\n      token: token,\n      expiration: tokenExpirationDate.toISOString()\n    }));\n  }, []);\n  const logout = useCallback(() => {\n    setToken(null);\n    setUserId(null);\n    setTokenExpirationDate(null);\n    localStorage.removeItem('userData');\n  }, []);\n  useEffect(() => {\n    if (token && tokenExperationDate) {\n      let remainingTime = tokenExperationDate.getTime() - new Date().getTime();\n      logoutTimer = setTimeout(logout, remainingTime);\n    } else {\n      clearTimeout(logoutTimer);\n    }\n  }, [token, logout, tokenExperationDate]);\n  useEffect(() => {\n    const storedData = JSON.parse(localStorage.getItem('userData'));\n\n    if (storedData && storedData.token && new Date(storedData.expirationDate) > new Date()) {\n      login(storedData.userId, storedData.token, new Date(storedData.expiration));\n    }\n  }, [login]);\n  return {\n    token,\n    login,\n    logout,\n    userId\n  };\n};\n\n_s(useAuth, \"EmE8LDi7/BPvieJ0UDhIuvLd/v0=\");","map":{"version":3,"sources":["/Users/davegb313/code/new-parties-project/frontend/src/shared/hooks/auth-hook.js"],"names":["useState","useCallback","useEffect","logoutTimer","useAuth","token","setToken","tokenExperationDate","setTokenExpirationDate","userId","setUserId","undefined","login","uid","expirationDate","tokenExpirationDate","Date","getTime","localStorage","setItem","JSON","stringify","expiration","toISOString","logout","removeItem","remainingTime","setTimeout","clearTimeout","storedData","parse","getItem"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,WAAnB,EAAgCC,SAAhC,QAAiD,OAAjD;AAEA,IAAIC,WAAJ;AAEA,OAAO,MAAMC,OAAO,GAAG,MAAM;AAAA;;AACzB,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBN,QAAQ,CAAC,KAAD,CAAlC;AACA,QAAM,CAACO,mBAAD,EAAsBC,sBAAtB,IAAgDR,QAAQ,EAA9D;AACA,QAAM,CAACS,MAAD,EAASC,SAAT,IAAsBV,QAAQ,CAACW,SAAD,CAApC;AAEA,QAAMC,KAAK,GAAGX,WAAW,CAAC,CAACY,GAAD,EAAMR,KAAN,EAAaS,cAAb,KAAgC;AACtDR,IAAAA,QAAQ,CAACD,KAAD,CAAR;AACAK,IAAAA,SAAS,CAACG,GAAD,CAAT;AACA,UAAME,mBAAmB,GAAGD,cAAc,IAAI,IAAIE,IAAJ,CAAS,IAAIA,IAAJ,GAAWC,OAAX,KAAuB,OAAO,IAAvC,CAA9C;AACAT,IAAAA,sBAAsB,CAACO,mBAAD,CAAtB;AACAG,IAAAA,YAAY,CAACC,OAAb,CACI,UADJ,EAEIC,IAAI,CAACC,SAAL,CAAe;AACXZ,MAAAA,MAAM,EAAEI,GADG;AAEXR,MAAAA,KAAK,EAAEA,KAFI;AAGXiB,MAAAA,UAAU,EAAEP,mBAAmB,CAACQ,WAApB;AAHD,KAAf,CAFJ;AAQH,GAbwB,EAatB,EAbsB,CAAzB;AAeA,QAAMC,MAAM,GAAGvB,WAAW,CAAC,MAAM;AAC7BK,IAAAA,QAAQ,CAAC,IAAD,CAAR;AACAI,IAAAA,SAAS,CAAC,IAAD,CAAT;AACAF,IAAAA,sBAAsB,CAAC,IAAD,CAAtB;AACAU,IAAAA,YAAY,CAACO,UAAb,CAAwB,UAAxB;AACH,GALyB,EAKvB,EALuB,CAA1B;AAOAvB,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAIG,KAAK,IAAIE,mBAAb,EAAkC;AAC9B,UAAImB,aAAa,GAAGnB,mBAAmB,CAACU,OAApB,KAAgC,IAAID,IAAJ,GAAWC,OAAX,EAApD;AACAd,MAAAA,WAAW,GAAGwB,UAAU,CAACH,MAAD,EAASE,aAAT,CAAxB;AACH,KAHD,MAGO;AACHE,MAAAA,YAAY,CAACzB,WAAD,CAAZ;AACH;AACJ,GAPQ,EAON,CAACE,KAAD,EAAQmB,MAAR,EAAgBjB,mBAAhB,CAPM,CAAT;AASAL,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAM2B,UAAU,GAAGT,IAAI,CAACU,KAAL,CAAWZ,YAAY,CAACa,OAAb,CAAqB,UAArB,CAAX,CAAnB;;AACA,QAAIF,UAAU,IAAIA,UAAU,CAACxB,KAAzB,IAAkC,IAAIW,IAAJ,CAASa,UAAU,CAACf,cAApB,IAAsC,IAAIE,IAAJ,EAA5E,EAAwF;AACpFJ,MAAAA,KAAK,CAACiB,UAAU,CAACpB,MAAZ,EAAoBoB,UAAU,CAACxB,KAA/B,EAAsC,IAAIW,IAAJ,CAASa,UAAU,CAACP,UAApB,CAAtC,CAAL;AACH;AACJ,GALQ,EAKN,CAACV,KAAD,CALM,CAAT;AAOA,SAAO;AAAEP,IAAAA,KAAF;AAASO,IAAAA,KAAT;AAAgBY,IAAAA,MAAhB;AAAwBf,IAAAA;AAAxB,GAAP;AACH,CA5CM;;GAAML,O","sourcesContent":["import { useState, useCallback, useEffect } from \"react\";\n\nlet logoutTimer;\n\nexport const useAuth = () => {\n    const [token, setToken] = useState(false);\n    const [tokenExperationDate, setTokenExpirationDate] = useState();\n    const [userId, setUserId] = useState(undefined);\n\n    const login = useCallback((uid, token, expirationDate) => {\n        setToken(token);\n        setUserId(uid);\n        const tokenExpirationDate = expirationDate || new Date(new Date().getTime() + 1000 * 3600);\n        setTokenExpirationDate(tokenExpirationDate);\n        localStorage.setItem(\n            'userData',\n            JSON.stringify({\n                userId: uid,\n                token: token,\n                expiration: tokenExpirationDate.toISOString()\n            })\n        );\n    }, []);\n\n    const logout = useCallback(() => {\n        setToken(null);\n        setUserId(null);\n        setTokenExpirationDate(null);\n        localStorage.removeItem('userData');\n    }, []);\n\n    useEffect(() => {\n        if (token && tokenExperationDate) {\n            let remainingTime = tokenExperationDate.getTime() - new Date().getTime();\n            logoutTimer = setTimeout(logout, remainingTime);\n        } else {\n            clearTimeout(logoutTimer);\n        }\n    }, [token, logout, tokenExperationDate]);\n\n    useEffect(() => {\n        const storedData = JSON.parse(localStorage.getItem('userData'));\n        if (storedData && storedData.token && new Date(storedData.expirationDate) > new Date()) {\n            login(storedData.userId, storedData.token, new Date(storedData.expiration));\n        }\n    }, [login]);\n\n    return { token, login, logout, userId };\n}"]},"metadata":{},"sourceType":"module"}