{"ast":null,"code":"var _jsxFileName = \"/Users/davegb313/code/parties/src/shared/UIElemnets/Input.js\",\n    _s = $RefreshSig$();\n\nimport React, { useReducer } from \"react\";\nimport { validate } from \"../util/validators\";\nimport \"./Input.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst inputReducer = (state, action) => {\n  switch (action.type) {\n    case 'CHANGE':\n      return { ...state,\n        value: action.value,\n        isValid: validate(action.value, action.validators)\n      };\n\n    case 'TOUCH':\n      {\n        return { ...state,\n          isTouched: true\n        };\n      }\n\n    default:\n      return state;\n  }\n};\n\nconst Input = props => {\n  _s();\n\n  const [inputState, dispatch] = useReducer(inputReducer, {\n    value: props.initialValue || '',\n    isTouched: false,\n    isValid: props.initialValid || false\n  });\n\n  const changeHandler = event => {\n    dispatch({\n      type: \"CHANGE\",\n      value: event.terget.value,\n      validators: props.validators\n    });\n  };\n\n  const touchHandler = () => {\n    dispatch({\n      type: \"TOUCH\"\n    });\n  };\n\n  const element = props.element === 'input' ? /*#__PURE__*/_jsxDEV(\"input\", {\n    id: props.id,\n    type: props.type,\n    placeholder: props.placeholder,\n    onChange: changeHandler,\n    onBlur: touchHandler,\n    value: inputState.value\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 9\n  }, this) : /*#__PURE__*/_jsxDEV(\"textarea\", {\n    id: props.id,\n    rows: props.rows || 3,\n    onChange: changeHandler,\n    onBlur: touchHandler,\n    value: inputState.value\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 9\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `form-control ${!inputState.isValid && inputState.isTouched && 'form-control-invalid'}`,\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: props.id,\n      children: props.label\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }, this), element, !inputState.isValid && inputState.isTouched && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: props.errorText\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 61\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Input, \"GZlVczeV1JIypYKtjrST4PLLMx8=\");\n\n_c = Input;\nexport default Input;\n\nvar _c;\n\n$RefreshReg$(_c, \"Input\");","map":{"version":3,"sources":["/Users/davegb313/code/parties/src/shared/UIElemnets/Input.js"],"names":["React","useReducer","validate","inputReducer","state","action","type","value","isValid","validators","isTouched","Input","props","inputState","dispatch","initialValue","initialValid","changeHandler","event","terget","touchHandler","element","id","placeholder","rows","label","errorText"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,QAAkC,OAAlC;AAEA,SAASC,QAAT,QAAyB,oBAAzB;AACA,OAAO,aAAP;;;AAEA,MAAMC,YAAY,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACpC,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,QAAL;AACE,aAAO,EACL,GAAGF,KADE;AAELG,QAAAA,KAAK,EAAEF,MAAM,CAACE,KAFT;AAGLC,QAAAA,OAAO,EAAEN,QAAQ,CAACG,MAAM,CAACE,KAAR,EAAeF,MAAM,CAACI,UAAtB;AAHZ,OAAP;;AAKF,SAAK,OAAL;AAAc;AACZ,eAAO,EACL,GAAGL,KADE;AAELM,UAAAA,SAAS,EAAE;AAFN,SAAP;AAID;;AACD;AACE,aAAON,KAAP;AAdJ;AAgBD,CAjBH;;AAmBA,MAAMO,KAAK,GAAGC,KAAK,IAAI;AAAA;;AACnB,QAAM,CAACC,UAAD,EAAaC,QAAb,IAAyBb,UAAU,CAACE,YAAD,EAAe;AACpDI,IAAAA,KAAK,EAAEK,KAAK,CAACG,YAAN,IAAsB,EADuB;AAEpDL,IAAAA,SAAS,EAAE,KAFyC;AAGpDF,IAAAA,OAAO,EAAEI,KAAK,CAACI,YAAN,IAAsB;AAHqB,GAAf,CAAzC;;AAMA,QAAMC,aAAa,GAAGC,KAAK,IAAI;AAC3BJ,IAAAA,QAAQ,CAAC;AACLR,MAAAA,IAAI,EAAE,QADD;AAELC,MAAAA,KAAK,EAAEW,KAAK,CAACC,MAAN,CAAaZ,KAFf;AAGLE,MAAAA,UAAU,EAAEG,KAAK,CAACH;AAHb,KAAD,CAAR;AAKH,GAND;;AAQA,QAAMW,YAAY,GAAG,MAAM;AACvBN,IAAAA,QAAQ,CAAC;AACLR,MAAAA,IAAI,EAAE;AADD,KAAD,CAAR;AAGH,GAJD;;AAMA,QAAMe,OAAO,GAAGT,KAAK,CAACS,OAAN,KAAkB,OAAlB,gBACZ;AACI,IAAA,EAAE,EAAET,KAAK,CAACU,EADd;AAEI,IAAA,IAAI,EAAEV,KAAK,CAACN,IAFhB;AAGI,IAAA,WAAW,EAAEM,KAAK,CAACW,WAHvB;AAII,IAAA,QAAQ,EAAEN,aAJd;AAKI,IAAA,MAAM,EAAEG,YALZ;AAMI,IAAA,KAAK,EAAEP,UAAU,CAACN;AANtB;AAAA;AAAA;AAAA;AAAA,UADY,gBAUZ;AACI,IAAA,EAAE,EAAEK,KAAK,CAACU,EADd;AAEI,IAAA,IAAI,EAAEV,KAAK,CAACY,IAAN,IAAc,CAFxB;AAGI,IAAA,QAAQ,EAAEP,aAHd;AAII,IAAA,MAAM,EAAEG,YAJZ;AAKI,IAAA,KAAK,EAAEP,UAAU,CAACN;AALtB;AAAA;AAAA;AAAA;AAAA,UAVJ;AAmBA,sBACI;AAAK,IAAA,SAAS,EAAG,gBAAe,CAACM,UAAU,CAACL,OAAZ,IAC5BK,UAAU,CAACH,SADiB,IACJ,sBAAuB,EADnD;AAAA,4BAEI;AAAO,MAAA,OAAO,EAAEE,KAAK,CAACU,EAAtB;AAAA,gBAA2BV,KAAK,CAACa;AAAjC;AAAA;AAAA;AAAA;AAAA,YAFJ,EAGKJ,OAHL,EAIK,CAACR,UAAU,CAACL,OAAZ,IAAuBK,UAAU,CAACH,SAAlC,iBAA+C;AAAA,gBAAIE,KAAK,CAACc;AAAV;AAAA;AAAA;AAAA;AAAA,YAJpD;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAQH,CAhDD;;GAAMf,K;;KAAAA,K;AAkDN,eAAeA,KAAf","sourcesContent":["import React, { useReducer } from \"react\";\n\nimport { validate } from \"../util/validators\";\nimport \"./Input.css\";\n\nconst inputReducer = (state, action) => {\n    switch (action.type) {\n      case 'CHANGE':\n        return {\n          ...state,\n          value: action.value,\n          isValid: validate(action.value, action.validators)\n        };\n      case 'TOUCH': {\n        return {\n          ...state,\n          isTouched: true\n        };\n      }\n      default:\n        return state;\n    }\n  };\n\nconst Input = props => {\n    const [inputState, dispatch] = useReducer(inputReducer, {\n        value: props.initialValue || '',\n        isTouched: false,\n        isValid: props.initialValid || false\n      });\n\n    const changeHandler = event => {\n        dispatch({\n            type: \"CHANGE\", \n            value: event.terget.value, \n            validators: props.validators\n        });\n    };\n\n    const touchHandler = () => {\n        dispatch({\n            type: \"TOUCH\"\n        });\n    };\n\n    const element = props.element === 'input' ? (\n        <input \n            id={props.id} \n            type={props.type} \n            placeholder={props.placeholder} \n            onChange={changeHandler}\n            onBlur={touchHandler}\n            value={inputState.value}\n         />\n        ) : (\n        <textarea \n            id={props.id} \n            rows={props.rows || 3} \n            onChange={changeHandler}\n            onBlur={touchHandler}\n            value={inputState.value}\n         />\n        )\n\n    return (\n        <div className={`form-control ${!inputState.isValid &&\n            inputState.isTouched && 'form-control-invalid'}`}>\n            <label htmlFor={props.id}>{props.label}</label>\n            {element}\n            {!inputState.isValid && inputState.isTouched && <p>{props.errorText}</p>}\n        </div>\n    )\n}\n\nexport default Input;"]},"metadata":{},"sourceType":"module"}